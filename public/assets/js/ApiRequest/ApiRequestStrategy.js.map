{"version":3,"file":"ApiRequest\\ApiRequestStrategy.js","mappings":";;;;;;;;;;;;;;AAAA;;;;GAIG;AACI,MAAM,aAAa;IACtB;;;;;OAKG;IACI,WAAW,CAAC,IAAY,EAAE,OAAe,GAAG;QAC/C,QAAQ,CAAC,MAAM,GAAG,GAAG,IAAI,gDAAgD,IAAI,EAAE,CAAC;IACpF,CAAC;IAED;;;;OAIG;IACI,eAAe,CAAC,OAAe,GAAG;QACrC,MAAM,OAAO,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC3C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACtC,MAAM,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YACjC,MAAM,cAAc,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAC3C,MAAM,UAAU,GAAG,cAAc,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;YACtF,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QACvC,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACI,SAAS,CAAC,IAAY;QACzB,MAAM,YAAY,GAAG,QAAQ,CAAC,MAAM,CAAC;QACrC,IAAI,CAAC,YAAY,EAAE,CAAC;YAChB,OAAO,IAAI,CAAC;QAChB,CAAC;QAED,MAAM,OAAO,GAAG,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACxC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACtC,MAAM,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YACjC,IAAI,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,GAAG,CAAC,EAAE,CAAC;gBAChC,OAAO,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAC7C,CAAC;QACL,CAAC;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;;;;;OAOG;IACI,SAAS,CAAC,IAAY,EAAE,KAAa,EAAE,OAAe,EAAE,EAAE,OAAe,GAAG;QAC/E,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QACxB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;QAC5D,MAAM,OAAO,GAAG,WAAW,IAAI,CAAC,WAAW,EAAE,EAAE,CAAC;QAChD,QAAQ,CAAC,MAAM,GAAG,GAAG,IAAI,IAAI,KAAK,IAAI,OAAO,SAAS,IAAI,EAAE,CAAC;IACjE,CAAC;CACJ;AAED,kBAAkB;AAClB,6CAA6C;AAC7C,EAAE;AACF,uBAAuB;AACvB,+CAA+C;AAC/C,EAAE;AACF,iCAAiC;AACjC,qDAAqD;AACrD,uCAAuC;AACvC,EAAE;AACF,sBAAsB;AACtB,wCAAwC;AACxC,EAAE;AACF,6BAA6B;AAC7B,mCAAmC;;;;;;;UCpFnC;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;ACN8C;AAQ9C,kCAAkC;AAC3B,MAAe,kBAAkB;IAKpC;QAJU,UAAK,GAAkB,IAAI,CAAC;QAC5B,sBAAiB,GAAkB,IAAI,CAAC;QAI9C,IAAI,CAAC,aAAa,GAAG,IAAI,yDAAa,EAAE,CAAC;IAC7C,CAAC;IAED,sDAAsD;IAC/C,YAAY,CAAC,KAAa;QAC7B,IAAI,CAAC,aAAa,CAAC,eAAe,EAAE,CAAC;QAErC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAEnB,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IACjD,CAAC;IAEO,SAAS;QACb,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IACvD,CAAC;IAEM,YAAY;QACf,MAAM,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,yBAAyB,CAAC,CAAC;QAC/D,OAAO,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IACtD,CAAC;IAED,yBAAyB;IAClB,eAAe,CAAC,YAAoB;QACvC,IAAI,CAAC,iBAAiB,GAAG,YAAY,CAAC;IAC1C,CAAC;IAED,kGAAkG;IACxF,UAAU,CAAC,aAAsC,EAAE,OAAgB,IAAI;QAC7E,MAAM,OAAO,qBAA+B,CAAC,aAAa,IAAI,EAAE,CAAC,CAAC,CAAC;QAEnE,IAAI,CAAC,SAAS,EAAE,CAAC;QAEjB,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;YACrB,OAAO,CAAC,eAAe,CAAC,GAAG,UAAU,IAAI,CAAC,KAAK,EAAE,CAAC;QACtD,CAAC;QAED,OAAO,CAAC,kBAAkB,CAAC,GAAG,gBAAgB,CAAC;QAC/C,OAAO,OAAO,CAAC;IACnB,CAAC;CAiBJ","sources":["webpack:///./public/assets/ts/ApiRequest/CookieService.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./public/assets/ts/ApiRequest/ApiRequestStrategy.ts"],"sourcesContent":["/**\r\n * Serviço para manipulação de cookies.\r\n *\r\n * Esta classe fornece métodos para definir, obter e limpar cookies.\r\n */\r\nexport class CookieService {\r\n    /**\r\n     * Limpa um cookie específico.\r\n     *\r\n     * @param {string} name - O nome do cookie a ser limpo.\r\n     * @param {string} [path='/'] - O caminho do cookie (opcional, padrão é '/').\r\n     */\r\n    public clearCookie(name: string, path: string = '/'): void {\r\n        document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=${path}`;\r\n    }\r\n\r\n    /**\r\n     * Limpa todos os cookies existentes.\r\n     *\r\n     * @param {string} [path='/'] - O caminho dos cookies (opcional, padrão é '/').\r\n     */\r\n    public clearAllCookies(path: string = '/'): void {\r\n        const cookies = document.cookie.split(';');\r\n        for (let i = 0; i < cookies.length; i++) {\r\n            const cookie = cookies[i].trim();\r\n            const equalSignIndex = cookie.indexOf('=');\r\n            const cookieName = equalSignIndex > -1 ? cookie.substring(0, equalSignIndex) : cookie;\r\n            this.clearCookie(cookieName, path);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Obtém o valor de um cookie específico.\r\n     *\r\n     * @param {string} name - O nome do cookie.\r\n     * @returns {string | null} - O valor do cookie, ou null se o cookie não existir.\r\n     */\r\n    public getCookie(name: string): string | null {\r\n        const cookieString = document.cookie;\r\n        if (!cookieString) {\r\n            return null;\r\n        }\r\n\r\n        const cookies = cookieString.split(';');\r\n        for (let i = 0; i < cookies.length; i++) {\r\n            const cookie = cookies[i].trim();\r\n            if (cookie.startsWith(`${name}=`)) {\r\n                return cookie.substring(name.length + 1);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Define um cookie.\r\n     *\r\n     * @param {string} name - O nome do cookie.\r\n     * @param {string} value - O valor do cookie.\r\n     * @param {number} [days=30] - O número de dias até a expiração do cookie (opcional, padrão é 30).\r\n     * @param {string} [path='/'] - O caminho do cookie (opcional, padrão é '/').\r\n     */\r\n    public setCookie(name: string, value: string, days: number = 30, path: string = '/'): void {\r\n        const date = new Date();\r\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\r\n        const expires = `expires=${date.toUTCString()}`;\r\n        document.cookie = `${name}=${value};${expires};path=${path}`;\r\n    }\r\n}\r\n\r\n// Exemplo de uso:\r\n// const cookieService = new CookieService();\r\n//\r\n// // Define um cookie:\r\n// cookieService.setCookie('user_id', '12345');\r\n//\r\n// // Obtém o valor de um cookie:\r\n// const userId = cookieService.getCookie('user_id');\r\n// console.log(userId); // Saída: 12345\r\n//\r\n// // Limpa um cookie:\r\n// cookieService.clearCookie('user_id');\r\n//\r\n// // Limpa todos os cookies:\r\n// cookieService.clearAllCookies();","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {CookieService} from \"./CookieService\";\r\n\r\nexport interface RequestOptions {\r\n    headers?: Record<string, string>;\r\n    auth?: boolean;       // true por padrão; se false, não adiciona o Authorization\r\n    isMultipart?: boolean; // se true, indica que será enviado FormData para upload\r\n}\r\n\r\n// Classe abstrata pai da Strategy\r\nexport abstract class ApiRequestStrategy {\r\n    protected token: string | null = null;\r\n    protected refreshTokenValue: string | null = null;\r\n    protected cookieService: CookieService;\r\n\r\n    constructor() {\r\n        this.cookieService = new CookieService();\r\n    }\r\n\r\n    // Define o token e, opcionalmente, registra em cookie\r\n    public setAuthToken(token: string): void {\r\n        this.cookieService.clearAllCookies();\r\n\r\n        this.token = token;\r\n\r\n        this.cookieService.setCookie('token', token);\r\n    }\r\n\r\n    private loadToken(): void {\r\n        this.token = this.cookieService.getCookie('token');\r\n    }\r\n\r\n    public getAuthToken(): string | null {\r\n        const meta = document.querySelector('meta[name=\"auth-token\"]');\r\n        return meta ? meta.getAttribute('content') : null;\r\n    }\r\n\r\n    // Define o refresh token\r\n    public setRefreshToken(refreshToken: string): void {\r\n        this.refreshTokenValue = refreshToken;\r\n    }\r\n\r\n    // Monta os headers: junta headers customizados e, se auth=true e token existir, adiciona o Bearer\r\n    protected getHeaders(customHeaders?: Record<string, string>, auth: boolean = true): Record<string, string> {\r\n        const headers: Record<string, string> = {...(customHeaders || {})};\r\n\r\n        this.loadToken();\r\n\r\n        if (auth && this.token) {\r\n            headers['Authorization'] = `Bearer ${this.token}`;\r\n        }\r\n\r\n        headers['X-Requested-With'] = 'XMLHttpRequest';\r\n        return headers;\r\n    }\r\n\r\n    // Métodos abstratos para serem implementados pelas strategies\r\n    abstract get(url: string, options?: RequestOptions): Promise<any>;\r\n\r\n    abstract post(url: string, data: any, options?: RequestOptions): Promise<any>;\r\n\r\n    abstract put(url: string, data: any, options?: RequestOptions): Promise<any>;\r\n\r\n    abstract patch(url: string, data: any, options?: RequestOptions): Promise<any>;\r\n\r\n    abstract delete(url: string, options?: RequestOptions): Promise<any>;\r\n\r\n    abstract login(url: string, credentials: any, options?: RequestOptions): Promise<any>;\r\n\r\n    // Cada strategy deve implementar sua lógica de refresh token\r\n    protected abstract refreshTokenRequest(): Promise<any>;\r\n}\r\n"],"names":[],"sourceRoot":""}