{"version":3,"file":"ApiRequest\\CookieService.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNA;;;;GAIG;AACI,MAAM,aAAa;IACtB;;;;;OAKG;IACI,WAAW,CAAC,IAAY,EAAE,OAAe,GAAG;QAC/C,QAAQ,CAAC,MAAM,GAAG,GAAG,IAAI,gDAAgD,IAAI,EAAE,CAAC;IACpF,CAAC;IAED;;;;OAIG;IACI,eAAe,CAAC,OAAe,GAAG;QACrC,MAAM,OAAO,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC3C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACtC,MAAM,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YACjC,MAAM,cAAc,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAC3C,MAAM,UAAU,GAAG,cAAc,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;YACtF,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QACvC,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACI,SAAS,CAAC,IAAY;QACzB,MAAM,YAAY,GAAG,QAAQ,CAAC,MAAM,CAAC;QACrC,IAAI,CAAC,YAAY,EAAE,CAAC;YAChB,OAAO,IAAI,CAAC;QAChB,CAAC;QAED,MAAM,OAAO,GAAG,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACxC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACtC,MAAM,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YACjC,IAAI,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,GAAG,CAAC,EAAE,CAAC;gBAChC,OAAO,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAC7C,CAAC;QACL,CAAC;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;;;;;OAOG;IACI,SAAS,CAAC,IAAY,EAAE,KAAa,EAAE,OAAe,EAAE,EAAE,OAAe,GAAG;QAC/E,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QACxB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;QAC5D,MAAM,OAAO,GAAG,WAAW,IAAI,CAAC,WAAW,EAAE,EAAE,CAAC;QAChD,QAAQ,CAAC,MAAM,GAAG,GAAG,IAAI,IAAI,KAAK,IAAI,OAAO,SAAS,IAAI,EAAE,CAAC;IACjE,CAAC;CACJ;AAED,kBAAkB;AAClB,6CAA6C;AAC7C,EAAE;AACF,uBAAuB;AACvB,+CAA+C;AAC/C,EAAE;AACF,iCAAiC;AACjC,qDAAqD;AACrD,uCAAuC;AACvC,EAAE;AACF,sBAAsB;AACtB,wCAAwC;AACxC,EAAE;AACF,6BAA6B;AAC7B,mCAAmC","sources":["webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./public/assets/ts/ApiRequest/CookieService.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\r\n * Serviço para manipulação de cookies.\r\n *\r\n * Esta classe fornece métodos para definir, obter e limpar cookies.\r\n */\r\nexport class CookieService {\r\n    /**\r\n     * Limpa um cookie específico.\r\n     *\r\n     * @param {string} name - O nome do cookie a ser limpo.\r\n     * @param {string} [path='/'] - O caminho do cookie (opcional, padrão é '/').\r\n     */\r\n    public clearCookie(name: string, path: string = '/'): void {\r\n        document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=${path}`;\r\n    }\r\n\r\n    /**\r\n     * Limpa todos os cookies existentes.\r\n     *\r\n     * @param {string} [path='/'] - O caminho dos cookies (opcional, padrão é '/').\r\n     */\r\n    public clearAllCookies(path: string = '/'): void {\r\n        const cookies = document.cookie.split(';');\r\n        for (let i = 0; i < cookies.length; i++) {\r\n            const cookie = cookies[i].trim();\r\n            const equalSignIndex = cookie.indexOf('=');\r\n            const cookieName = equalSignIndex > -1 ? cookie.substring(0, equalSignIndex) : cookie;\r\n            this.clearCookie(cookieName, path);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Obtém o valor de um cookie específico.\r\n     *\r\n     * @param {string} name - O nome do cookie.\r\n     * @returns {string | null} - O valor do cookie, ou null se o cookie não existir.\r\n     */\r\n    public getCookie(name: string): string | null {\r\n        const cookieString = document.cookie;\r\n        if (!cookieString) {\r\n            return null;\r\n        }\r\n\r\n        const cookies = cookieString.split(';');\r\n        for (let i = 0; i < cookies.length; i++) {\r\n            const cookie = cookies[i].trim();\r\n            if (cookie.startsWith(`${name}=`)) {\r\n                return cookie.substring(name.length + 1);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Define um cookie.\r\n     *\r\n     * @param {string} name - O nome do cookie.\r\n     * @param {string} value - O valor do cookie.\r\n     * @param {number} [days=30] - O número de dias até a expiração do cookie (opcional, padrão é 30).\r\n     * @param {string} [path='/'] - O caminho do cookie (opcional, padrão é '/').\r\n     */\r\n    public setCookie(name: string, value: string, days: number = 30, path: string = '/'): void {\r\n        const date = new Date();\r\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\r\n        const expires = `expires=${date.toUTCString()}`;\r\n        document.cookie = `${name}=${value};${expires};path=${path}`;\r\n    }\r\n}\r\n\r\n// Exemplo de uso:\r\n// const cookieService = new CookieService();\r\n//\r\n// // Define um cookie:\r\n// cookieService.setCookie('user_id', '12345');\r\n//\r\n// // Obtém o valor de um cookie:\r\n// const userId = cookieService.getCookie('user_id');\r\n// console.log(userId); // Saída: 12345\r\n//\r\n// // Limpa um cookie:\r\n// cookieService.clearCookie('user_id');\r\n//\r\n// // Limpa todos os cookies:\r\n// cookieService.clearAllCookies();"],"names":[],"sourceRoot":""}